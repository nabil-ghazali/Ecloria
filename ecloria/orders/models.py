from django.conf import settings
from django.db import models
from catalog.models import Product


# -------------------------------
# ğŸ“¦ Order (Commande dâ€™un produit)
# -------------------------------
"""
Un Order reprÃ©sente UNE ligne de commande :
- Quel utilisateur a commandÃ© ?
- Quel produit a Ã©tÃ© ajoutÃ© au panier ?
- Quelle quantitÃ© ?
- Est-ce que la commande a Ã©tÃ© validÃ©e (passÃ©e) ou non ?
"""
class Order(models.Model):
    # Lien vers lâ€™utilisateur qui a passÃ© la commande
    # settings.AUTH_USER_MODEL = modÃ¨le User dÃ©fini dans ton projet (souvent "auth.User" ou "accounts.User")
    # CASCADE : si un utilisateur est supprimÃ©, toutes ses commandes le sont aussi
    # related_name="orders" â†’ permet dâ€™Ã©crire user.orders.all() pour accÃ©der aux commandes dâ€™un utilisateur
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="orders"
    )

    # Lien vers le produit commandÃ©
    # CASCADE : si le produit est supprimÃ©, toutes les commandes associÃ©es disparaissent aussi
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE
    )

    # Nombre dâ€™unitÃ©s du produit commandÃ©es
    quantity = models.IntegerField(default=1)

    # Est-ce que cette commande a Ã©tÃ© validÃ©e (payÃ©e) ?
    ordered = models.BooleanField(default=False)

    # Date de crÃ©ation de la commande (automatique)
    created_at = models.DateTimeField(auto_now_add=True)

    # Date de derniÃ¨re modification (mise Ã  jour auto Ã  chaque changement)
    updated_at = models.DateTimeField(auto_now=True)

    # ReprÃ©sentation lisible de lâ€™objet (utile dans lâ€™admin Django et le shell)
    def __str__(self):
        return f"{self.product.name} ({self.quantity})"


# -------------------------------
# ğŸ›’ Cart (Panier dâ€™un utilisateur)
# -------------------------------
"""
Un Cart reprÃ©sente le PANIER dâ€™un utilisateur :
- Chaque utilisateur a UN SEUL panier actif
- Un panier peut contenir plusieurs commandes (Order)
- On peut savoir si le panier est validÃ© (payÃ©) ou encore en cours
"""
class Cart(models.Model):
    # Lien unique vers un utilisateur (chaque utilisateur a un panier)
    # OneToOneField â†’ garantit quâ€™un seul panier par utilisateur existe
    # CASCADE : si lâ€™utilisateur est supprimÃ©, son panier lâ€™est aussi
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, 
        on_delete=models.CASCADE
    )

    # Relation ManyToMany avec Order â†’ un panier peut contenir plusieurs commandes
    orders = models.ManyToManyField(Order)

    # Indique si le panier a Ã©tÃ© finalisÃ© (payÃ©) ou pas
    ordered = models.BooleanField(default=False)

    # Date dâ€™achat â†’ reste vide tant que le panier nâ€™a pas Ã©tÃ© validÃ©
    purchase_date = models.DateTimeField(blank=True, null=True)
    
    # ReprÃ©sentation lisible de lâ€™objet (affiche le nom dâ€™utilisateur)
    def __str__(self):
        return self.user.username
